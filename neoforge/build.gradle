/*
 * MojangMaps
 * Copyright (C) 2024 Abel van Hulst/Abelkrijgtalles/Abelpro678
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    // Note: This is only needed for multi-loader projects
    // The main architectury loom version is set at the start of the root build.gradle
    id "architectury-plugin" version "3.4-SNAPSHOT"
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

architectury {
    platformSetupLoomIde()
    neoForge()
}

// TODO this is already defined in the main settings.gradle file, why doesn't it work unless also defined here?
//  (If compiling does work without this block feel free to remove)
repositories {
    maven {
        name "Neoforge"
        url "https://maven.neoforged.net/releases/"
    }
}

loom {
    silentMojangMappingsLicense() // Shut the licencing warning
    accessWidenerPath = project(":common").file("src/main/resources/${accessWidenerVersion}.${mod_id}.accesswidener")

    mixin {
        useLegacyMixinAp = false
    }
    neoForge {
        //TODO can this all be removed ?????

        // Access wideners are now defined in the `remapJar.atAccessWideners`
//        convertAccessWideners = true
//        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        // Mixins are now defined in the `mods.toml`
//        mixinConfigs = [
//                "mojang_maps.mixins.json"
//        ]
    }
    mixin {
        // Mixins are now defined in the `mods.toml`
//        mixinConfigs = [
//                "mojang_maps.mixins.json"
//        ]
    }

    // "runs" isn't required, but when we do need it then it can be useful
    runs {
        client {
            client()
            setConfigName("NeoForge Client")
            ideConfigGenerated(true)
            runDir("../run")
//            vmArgs("-XX:-OmitStackTraceInFastThrow", minecraftMemoryJavaArg)
        }
        server {
            server()
            setConfigName("NeoForge Server")
            ideConfigGenerated(true)
            runDir("../run")
        }
    }
}

remapJar {
    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
//    classifier null

    atAccessWideners.add("${rootProject.mod_id}.accesswidener")
}

configurations {
    // The addModJar basically embeds the mod to the built jar
    addModJar
    include.extendsFrom addModJar
    modImplementation.extendsFrom addModJar
}

def addMod(path, enabled) {
    if (enabled == "2")
        dependencies { implementation(path) }
    else if (enabled == "1")
        dependencies { modCompileOnly(path) }
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings loom.layered() {
        // Mojmap mappings
        officialMojangMappings()
        // Parchment mappings (it adds parameter mappings & javadoc)
        parchment("org.parchmentmc.data:parchment-${rootProject.parchment_version}@zip")
    }

    // Neoforge
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    //use addModJar() to include a library, some_api_version should be in version.property
    //addModJar(someApi.module("moduleName", rootProject.some_api_version))

    //addMod can be used, to control it via the version.property
    //addMod("example.maven:some_mod:${rootProject.some_mod_version}", rootProject.enable_some_mod)
}

task deleteResources(type: Delete) {
    delete file("build/resources/main")
}

tasks.register('copyAllResources') {
    dependsOn(copyCoreResources)
    dependsOn(copyCommonLoaderResources)
}

processResources {
    dependsOn(tasks.named('copyAllResources'))
}

tasks.named('runClient') {
    dependsOn(tasks.named('copyAllResources'))
    finalizedBy(deleteResources)
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}
